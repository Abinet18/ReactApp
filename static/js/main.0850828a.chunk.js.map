{"version":3,"sources":["serviceWorker.js","kanban/KanbanCard.js","kanban/KanbanColumn.js","kanban/Kanban.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","React","require","KanbanCard","_onMoveRight","card","_this","props","onUpdateCard","content","column","_onMoveLeft","this","createElement","className","onClick","class","Component","KanbanColumn","_onAdd","prompt","onAddCard","_this2","_this$props","cards","react_default","a","filter","map","kanban_KanbanCard","Kanban","columns","kanban_KanbanColumn","App","state","_onAddCard","setState","Object","objectSpread","concat","toConsumableArray","_onUpdateCard","updatedCard","c","kanban_Kanban","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0850828a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const React = require('react');\r\n\r\nclass KanbanCard extends React.Component {\r\n    render() {\r\n        const { card } = this.props;\r\n        return (\r\n            <div className=\"card\">\r\n                {\r\n                    card.column > 1 && (<div className=\"icon\">\r\n                        <button className=\"btn\" onClick={this._onMoveLeft}>\r\n                            <i class=\"fas fa-chevron-left\"></i></button>\r\n                    </div>)\r\n                }\r\n\r\n                <div className=\"content\">{card.content}</div>\r\n                {card.column < 4 && (<div className=\"icon\">\r\n                    <button className=\"btn\" onClick={this._onMoveRight}>\r\n                        <i class=\"fas fa-chevron-right\"></i></button></div>)}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _onMoveRight = () => {\r\n        const card = this.props.card;\r\n        this.props.onUpdateCard(card, { content:card.content, column: card.column + 1 });\r\n    }\r\n    _onMoveLeft = () => {\r\n        const card = this.props.card;\r\n        this.props.onUpdateCard(card, { content:card.content, column: card.column - 1 });\r\n    }\r\n}\r\n\r\nexport default KanbanCard;\r\n\r\n","import React from 'react';\r\nimport KanbanCard from './KanbanCard';\r\nclass KanbanColumn extends React.Component {\r\n    render() {\r\n        const { column, cards } = this.props;\r\n        return (\r\n            <div className=\"column\">\r\n                <div className={\"header\" + column}>\r\n                    Column {column}\r\n                </div>\r\n                {cards.filter(card => card.column === column).map(card =>\r\n                    (\r\n                    <KanbanCard card={card} onUpdateCard={this.props.onUpdateCard}/>\r\n                    ))}\r\n                <div><button className=\"card addbtn\" onClick={this._onAdd}>+Add Card</button></div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    _onAdd = ()=> {\r\n        const content=prompt(\"Title of task to do\",\"Test\");\r\n        this.props.onAddCard({column:this.props.column,content});\r\n    }\r\n\r\n}\r\nexport default KanbanColumn;","import React from 'react';\r\nimport  KanbanColumn from './KanbanColumn';\r\nclass Kanban extends React.Component {\r\n    render() {\r\n        const { columns, cards } = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n                {columns.map(column => (\r\n                    <KanbanColumn column={column} \r\n                    cards={cards} onAddCard={this.props.onAddCard}\r\n                    onUpdateCard={this.props.onUpdateCard} />\r\n                ))}\r\n            </div>)\r\n\r\n    }\r\n}\r\n\r\nexport default Kanban;","import './App.css';\r\nimport React from 'react';\r\nimport Kanban from './kanban/Kanban';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        columns: [1, 2, 3, 4],\r\n        cards: [{\r\n            column: 1,\r\n            content: \"Card 1\"\r\n        },\r\n        {\r\n            column: 1,\r\n            content: \"Card 10\"\r\n        },\r\n        {\r\n            column: 2,\r\n            content: \"Card 2\"\r\n        }, {\r\n            column: 3,\r\n            content: \"Card 3\"\r\n        },\r\n        {\r\n            column: 4,\r\n            content: \"Card 4\"\r\n        }]\r\n    };\r\n    render() {\r\n        return <Kanban cards={this.state.cards} \r\n        columns={this.state.columns} onAddCard={this._onAddCard}\r\n        onUpdateCard={this._onUpdateCard} />\r\n    }\r\n\r\n    _onAddCard=(card)=> {\r\n        this.setState(state=> {\r\n            return {\r\n                ...state,\r\n                cards:[...state.cards,card]\r\n            };\r\n        });\r\n    }\r\n\r\n    _onUpdateCard = (card,updatedCard)=> {\r\n        this.setState(state=> {\r\n            return {\r\n                ...state,\r\n                cards:state.cards.filter(c=>c!==card).concat(updatedCard)\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}