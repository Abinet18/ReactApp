{"version":3,"sources":["kanban/Kanban.js","kanban/KanbanColumn.js","kanban/KanbanCard.js","App.js","serviceWorker.js","index.js"],"names":["React","require","KanbanColumn","Kanban","_this","this","_this$props","props","columns","cards","createElement","className","map","column","onAddCard","onUpdateCard","Component","module","exports","KanbanCard","_onAdd","content","prompt","_this2","filter","card","onClick","_onMoveRight","_onMoveLeft","class","App","state","_onAddCard","setState","Object","objectSpread","concat","toConsumableArray","_onUpdateCard","updatedCard","c","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6de8b897.chunk.js","sourcesContent":["const React = require('react');\r\nconst KanbanColumn = require('./KanbanColumn');\r\nclass Kanban extends React.Component {\r\n    render() {\r\n        const { columns, cards } = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n                {columns.map(column => (\r\n                    <KanbanColumn column={column} \r\n                    cards={cards} onAddCard={this.props.onAddCard}\r\n                    onUpdateCard={this.props.onUpdateCard} />\r\n                ))}\r\n            </div>)\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = Kanban;","const React = require('react');\r\nconst KanbanCard = require('./KanbanCard');\r\nclass KanbanColumn extends React.Component {\r\n    render() {\r\n        const { column, cards } = this.props;\r\n        return (\r\n            <div className=\"column\">\r\n                <div className={\"header\" + column}>\r\n                    Column {column}\r\n                </div>\r\n                {cards.filter(card => card.column === column).map(card =>\r\n                    (\r\n                    <KanbanCard card={card} onUpdateCard={this.props.onUpdateCard}/>\r\n                    ))}\r\n                <div><button className=\"card addbtn\" onClick={this._onAdd}>+Add Card</button></div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    _onAdd = ()=> {\r\n        const content=prompt(\"Title of task to do\",\"Test\");\r\n        this.props.onAddCard({column:this.props.column,content});\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = KanbanColumn;","const React = require('react');\r\n\r\nclass KanbanCard extends React.Component\r\n{\r\n    render() {\r\n        const { card } = this.props;\r\n        return (\r\n            <div className=\"card\">\r\n                {\r\n                    card.column > 1 && (<div className=\"icon\">\r\n                        <button className=\"btn\" onClick={this._onMoveLeft}>\r\n                            <i class=\"fas fa-chevron-left\"></i></button>\r\n                    </div>)\r\n                }\r\n\r\n                <div className=\"content\">{card.content}</div>\r\n                {card.column < 4 && (<div className=\"icon\">\r\n                    <button className=\"btn\" onClick={this._onMoveRight}>\r\n                        <i class=\"fas fa-chevron-right\"></i></button></div>)}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _onMoveRight = () => {\r\n        const card = this.props.card;\r\n        this.props.onUpdateCard(card, { content:card.content, column: card.column + 1 });\r\n    }\r\n    _onMoveLeft = () => {\r\n        const card = this.props.card;\r\n        this.props.onUpdateCard(card, { content:card.content, column: card.column - 1 });\r\n    }\r\n}\r\n\r\nmodule.exports = KanbanCard;\r\n\r\n","import './App.css';\r\nconst React = require('react');\r\nconst Kanban = require('./kanban/Kanban');\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        columns: [1, 2, 3, 4],\r\n        cards: [{\r\n            column: 1,\r\n            content: \"Card 1\"\r\n        },\r\n        {\r\n            column: 1,\r\n            content: \"Card 10\"\r\n        },\r\n        {\r\n            column: 2,\r\n            content: \"Card 2\"\r\n        }, {\r\n            column: 3,\r\n            content: \"Card 3\"\r\n        },\r\n        {\r\n            column: 4,\r\n            content: \"Card 4\"\r\n        }]\r\n    };\r\n    render() {\r\n        return <Kanban cards={this.state.cards} \r\n        columns={this.state.columns} onAddCard={this._onAddCard}\r\n        onUpdateCard={this._onUpdateCard} />\r\n    }\r\n\r\n    _onAddCard=(card)=> {\r\n        this.setState(state=> {\r\n            return {\r\n                ...state,\r\n                cards:[...state.cards,card]\r\n            };\r\n        });\r\n    }\r\n\r\n    _onUpdateCard = (card,updatedCard)=> {\r\n        this.setState(state=> {\r\n            return {\r\n                ...state,\r\n                cards:state.cards.filter(c=>c!==card).concat(updatedCard)\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}